#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
CS 452: Kernel 1
\end_layout

\begin_layout Author
Jason Sun (#20387090) and Shuo Chang (#20378235)
\end_layout

\begin_layout Date
May 22, 2015
\end_layout

\begin_layout Section
Program Operation
\end_layout

\begin_layout LyX-Code
\align block
> load -b 0x00200000 -h 129.97.167.12 "ARM/j53sun/k1.elf"
\end_layout

\begin_layout LyX-Code
> go
\end_layout

\begin_layout Standard
All system calls required by assignment are supported:
\end_layout

\begin_layout Description

\family typewriter
\series bold
int
\begin_inset space ~
\end_inset

Create(int
\begin_inset space ~
\end_inset

priority,
\begin_inset space ~
\end_inset

void
\begin_inset space ~
\end_inset

(*code)())
\family default
\series default
 Schedule a task with specified
\family typewriter
 priority
\family default
 and function pointer
\family typewriter
 code
\family default
.
\end_layout

\begin_layout Description

\family typewriter
\series bold
int
\begin_inset space ~
\end_inset

MyTid()
\family default
\series default
 Return the task id for the calling task.
\end_layout

\begin_layout Description

\family typewriter
int
\begin_inset space ~
\end_inset

MyParentTid()
\family default
 Return the task id of the parent of the calling task.
\end_layout

\begin_layout Description

\family typewriter
\series bold
void
\begin_inset space ~
\end_inset

Pass()
\family default
\series default
 No-op for entering the kernel.
\end_layout

\begin_layout Description

\family typewriter
void
\begin_inset space ~
\end_inset

Exit()
\family default
 Exits the calling task and never schedule it again.
\end_layout

\begin_layout Section
Kernel Details
\end_layout

\begin_layout Subsection
Context Switch
\end_layout

\begin_layout Standard
From kernel space to user space:
\end_layout

\begin_layout Enumerate

\family typewriter
TaskDescriptor *td
\family default
, 
\family typewriter
Syscall **request
\family default
 are passed to 
\family typewriter
KernelExit()
\family default
 
\end_layout

\begin_layout Enumerate
Store all kernel registers onto kernel stack 
\end_layout

\begin_layout Enumerate
Change to system mode 
\end_layout

\begin_layout Enumerate
Put 
\family typewriter
td->sp
\family default
 to user's 
\family typewriter
sp
\family default
 
\end_layout

\begin_layout Enumerate
Put 
\family typewriter
td->ret
\family default
 to 
\family typewriter
r0
\family default
 which returns result of system calls to user task 
\end_layout

\begin_layout Enumerate
Load all user registers: 
\family typewriter
r1
\family default
 contains 
\family typewriter
pc
\family default
 of user mode, whereas 
\family typewriter
r2
\family default
 contains the saved 
\family typewriter
cpsr
\family default
 of user mode 
\end_layout

\begin_layout Enumerate
Change back to supervisor mode 
\end_layout

\begin_layout Enumerate
Put saved user mode 
\family typewriter
cpsr
\family default
 into 
\family typewriter
spsr
\family default
 of supervisor mode 
\end_layout

\begin_layout Enumerate

\family typewriter
movs pc, r1
\family default
 to jump to user code while simultaneously change 
\family typewriter
cpsr
\end_layout

\begin_layout Standard
From user space to kernel space: 
\end_layout

\begin_layout Enumerate
Put 
\family typewriter
lr
\family default
 of supervisor mode in 
\family typewriter
r1
\family default
 
\end_layout

\begin_layout Enumerate
Put 
\family typewriter
spsr
\family default
 of supervisor mode, which is the saved 
\family typewriter
cpsr
\family default
 of user mode, into 
\family typewriter
r2
\family default
 
\end_layout

\begin_layout Enumerate
Change to system mode 
\end_layout

\begin_layout Enumerate
Store user registers 
\family typewriter
r1-r12
\family default
 and 
\family typewriter
lr
\family default
, to user stack 
\end_layout

\begin_layout Enumerate
Move 
\family typewriter
sp
\family default
, 
\family typewriter
r0
\family default
 to 
\family typewriter
r2
\family default
,
\family typewriter
 r3
\family default
 
\end_layout

\begin_layout Enumerate
Change back to supervisor mode 
\end_layout

\begin_layout Enumerate
Load multiple from stack into 
\family typewriter
r0
\family default
, and 
\family typewriter
r1
\family default
: 
\family typewriter
r0
\family default
 contains pointer to task descriptor, 
\family typewriter
r1
\family default
 contains pointer to pointer to request 
\end_layout

\begin_layout Enumerate
Store 
\family typewriter
r2
\family default
 to 
\family typewriter
td->sp
\family default
, 
\family typewriter
r3
\family default
 to 
\family typewriter
*request
\family default
 
\end_layout

\begin_layout Enumerate
Load the rest of the kernel’s registers (
\family typewriter
r2-r12
\family default
) from stack
\end_layout

\begin_layout Subsubsection
Description in ARM
\end_layout

\begin_layout Standard
The piece of code responsible for context switch is: 
\end_layout

\begin_layout LyX-Code
KernelExit: 	
\end_layout

\begin_deeper
\begin_layout LyX-Code
stmfd   sp!, {r0-r12, lr} 	
\end_layout

\begin_layout LyX-Code
msr cpsr_c, #0xdf 	
\end_layout

\begin_layout LyX-Code
ldr sp, [r0, #12] 	
\end_layout

\begin_layout LyX-Code
ldr r0, [r0, #8] 	
\end_layout

\begin_layout LyX-Code
ldmfd   sp!, {r1-r12, lr} 	
\end_layout

\begin_layout LyX-Code
msr cpsr_c, #0xd3 	
\end_layout

\begin_layout LyX-Code
msr spsr, r2 	
\end_layout

\begin_layout LyX-Code
movs pc, r1 
\end_layout

\begin_layout LyX-Code

\end_layout

\end_deeper
\begin_layout LyX-Code
KernelEnter: 	
\end_layout

\begin_deeper
\begin_layout LyX-Code
mov r1, lr 	
\end_layout

\begin_layout LyX-Code
mrs r2, spsr 	
\end_layout

\begin_layout LyX-Code
msr cpsr_c, #0xdf 	
\end_layout

\begin_layout LyX-Code
stmfd   sp!, {r1-r12, lr} 	
\end_layout

\begin_layout LyX-Code
mov r2, sp 	
\end_layout

\begin_layout LyX-Code
mov r3, r0 	
\end_layout

\begin_layout LyX-Code
msr cpsr_c, #0xd3 	
\end_layout

\begin_layout LyX-Code
ldmfd sp!, {r0, r1} 	
\end_layout

\begin_layout LyX-Code
str r2, [r0, #12] 	
\end_layout

\begin_layout LyX-Code
str r3, [r1] 	
\end_layout

\begin_layout LyX-Code
ldmfd sp!, {r2-r12, pc}
\end_layout

\end_deeper
\begin_layout Subsubsection
Trap Frame
\end_layout

\begin_layout Standard
When the user does a syscall, a trap frame is set up on the top of the user
 stack to store user’s current registers.
 The layout of registers stored is: 
\end_layout

\begin_layout LyX-Code
[ R1 (PC)   ] <-- SP after storing trap frame
\end_layout

\begin_layout LyX-Code
[ R2 (CSPR) ]
\end_layout

\begin_layout LyX-Code
[   ...
     ]
\end_layout

\begin_layout LyX-Code
[ R12       ]
\end_layout

\begin_layout LyX-Code
[ LR        ]
\end_layout

\begin_layout LyX-Code
[   ...
     ] <-- SP at SWI instruction
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Initializing the trap frame for the first time is done in 
\family typewriter
taskCreate()
\family default
, and for later context context switches, the trap frame is handled in 
\family typewriter
context_switch.s
\family default
, written in assembly code.
 On return, the result of the syscall is stored in 
\family typewriter
r0
\family default
, and execution resumes at function 
\family typewriter
swi()
\family default
, where the syscall occurred.
\end_layout

\begin_layout Subsection
Syscalls
\end_layout

\begin_layout Standard
Syscalls defined in C functions, in
\family typewriter
 syscall.{c,h}
\family default
 files.
 There is a
\family typewriter
 Syscall
\family default
 structure that contains the syscall type, and args 1 and args 2.
\end_layout

\begin_layout Subsection
Tasks
\end_layout

\begin_layout Standard
A task can be created off a function pointer and represents a chunk of code
 to execute.
\end_layout

\begin_layout Subsubsection
Task Descriptor
\end_layout

\begin_layout Standard
A TaskDescriptor struct holds:
\end_layout

\begin_layout Itemize
task id, contains an index into a global table of task descriptors pre-allocated.
\end_layout

\begin_layout Itemize
parent id, whoever called
\family typewriter
 Create()
\family default
.
\end_layout

\begin_layout Itemize
return value,
\end_layout

\begin_layout Itemize
stack pointer,
\family typewriter
 sp
\family default
 and
\family typewriter
 spsr
\family default
 are manipulated by the context switch.
\end_layout

\begin_layout Itemize
saved program status register
\end_layout

\begin_layout Itemize
and a pointer to the next task descriptor for singly linked list.
\end_layout

\begin_layout Standard
Currently only can create 128 tasks before failing to create more tasks.
\end_layout

\begin_layout Subsubsection
Scheduling
\end_layout

\begin_layout Standard
Tasks each has a priority level.
 The scheduler tracks this tasks' priority via 32 ring buffer queues.
\end_layout

\begin_layout Standard
A bitmask keeps track of which of the 32 queues contains tasks.
 Using this bitmask, we efficiently computing the number of right leading
 zeroes in the bitmask with De Bruijn table lookup.
\end_layout

\begin_layout Standard
The kernel calls
\family typewriter
taskSchedule()
\family default
 on each loop, and the queue with the highest priority is returned.
 The head of that queue is rotated to be the tail and the pointer is returned
 as the next task to be scheduled.
\end_layout

\begin_layout Subsubsection
Task Creation
\end_layout

\begin_layout Standard
A task is created by specifying a priority, a function pointer, and parent
 task id.
 The
\family typewriter
 Create()
\family default
 syscall is implemented by this function.
\end_layout

\begin_layout Standard
A task descriptor is filled in to the task table.
 Then a stack is allocated, a size of 4096 words.
 There is syscall to change a task's stack size.
 It also initializes a trap frame by setting
\family typewriter
pc
\family default
 to the value of the function pointer and saved stored program register.
\end_layout

\begin_layout Standard
Finally the kernel adds the task descriptor to priority queue.
\end_layout

\begin_layout Subsubsection
Task Exit & Deletion
\end_layout

\begin_layout Standard
Once a task is removed from the priority queues, the task will not be scheduled
 again.
 No effort is made to reclaim task descriptors.
\end_layout

\begin_layout Section
Source Code Location
\end_layout

\begin_layout Standard
Code is located under
\family typewriter
 /u1/j53sun/cs452k1
\family default
/.
\end_layout

\begin_layout Standard
Compiling by running
\family typewriter
 make
\family default
, which also copies the local
\family typewriter
 kernel.elf
\family default
 to
\family typewriter
 /u/cs452/tftp/ARM/j53sun/k1.elf
\family default
.
\end_layout

\begin_layout Paragraph

\family typewriter
File md5sums
\end_layout

\begin_layout LyX-Code
8da586d949d31e239dfbe0c8356588f6  bwio.c
\end_layout

\begin_layout LyX-Code
db0bab80ffcef52c8ce1a968c65587a9  bwio.h
\end_layout

\begin_layout LyX-Code
c99bf6f10dd0ec08f47124c8968a7a54  context_switch.h
\end_layout

\begin_layout LyX-Code
1ba8cd1b57c22116b57e96d22022cec5  context_switch.s
\end_layout

\begin_layout LyX-Code
e9ecc0c507565cc766ec637a9aec3ab6  cpsr.h
\end_layout

\begin_layout LyX-Code
7742f42b8758e1c75de72f01a94a4ce0  kernel.c
\end_layout

\begin_layout LyX-Code
e87799ad275ab3fd1199dba2ea334e5c  linker.ld
\end_layout

\begin_layout LyX-Code
7c1b255735fd098a6ecd2b8a8903a0d9  Makefile
\end_layout

\begin_layout LyX-Code
867bebe51a877a07650ec35b39a8808a  scheduler.c
\end_layout

\begin_layout LyX-Code
d053b19cbdee9ddb872ad8c69841c478  scheduler.h
\end_layout

\begin_layout LyX-Code
d6bdf5714a8d499da29f1064973580ae  stdbool.h
\end_layout

\begin_layout LyX-Code
9a67eb2e94c96d24e676c2c87553cca5  syscall.c
\end_layout

\begin_layout LyX-Code
efdd19b65fbc4089056d0dd3fbc1f2c5  syscall.h
\end_layout

\begin_layout LyX-Code
9c9e816e473306b143c273e6fa48a300  task.c
\end_layout

\begin_layout LyX-Code
d5beb6f6b87d1d257d48b271aa8ce34d  task.h
\end_layout

\begin_layout LyX-Code
2c5fc627ac5386f1f96a65d2f8dc9d67  ts7200.h
\end_layout

\begin_layout LyX-Code
5b63a07500bc5f2ccb08a47ccc7fadaa  user_task.c
\end_layout

\begin_layout LyX-Code
962dc8dab4c71088e86d7c7c6bb9adc8  user_task.h
\end_layout

\begin_layout Section
Program Output
\end_layout

\begin_layout LyX-Code
RedBoot> go
\end_layout

\begin_layout LyX-Code
Created: 2
\end_layout

\begin_layout LyX-Code
Created: 3
\end_layout

\begin_layout LyX-Code
Task 4, Parent: -1
\end_layout

\begin_layout LyX-Code
Task 4, Parent: -1
\end_layout

\begin_layout LyX-Code
Created: 4
\end_layout

\begin_layout LyX-Code
Task: 5, Parent: -1
\end_layout

\begin_layout LyX-Code
Task: 5, Parent: -1
\end_layout

\begin_layout LyX-Code
Created: 5
\end_layout

\begin_layout LyX-Code
First: exiting
\end_layout

\begin_layout LyX-Code
Task: 2, Parent: -1
\end_layout

\begin_layout LyX-Code
Task: 3, Parent: -1
\end_layout

\begin_layout LyX-Code
Task: 2, Parent: -1
\end_layout

\begin_layout LyX-Code
Task: 3, Parent: -1
\end_layout

\begin_layout LyX-Code
No task scheduled; exiting...
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Program completed with status 0
\end_layout

\begin_layout Paragraph
Explaination
\end_layout

\begin_layout Enumerate
Task 2 and 3 has lower priority than the creating task, so the creating
 task is still going to be scheduled to run.
 
\end_layout

\begin_layout Enumerate
When task 4 and 5 are created, they have a higher priority than the creating
 task.
 Thus they each run to completion before scheduler returns to the creating
 task (and thus delaying creation of second task).
 
\end_layout

\begin_layout Enumerate
The creating task then exits, after the second create call returns.
\end_layout

\begin_layout Enumerate
Only then does task 2 and 3 get to run.
 They alternate running every time they call pass because they have the
 same priority in a circular queue.
\end_layout

\end_body
\end_document
