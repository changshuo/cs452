#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
CS 452: Kernel 3
\end_layout

\begin_layout Author
Jason Sun (#20387090) and Shuo Chang (#20378235)
\end_layout

\begin_layout Date
June 9, 2015
\end_layout

\begin_layout Standard
This document builds upon Kernel 2 and Kernel 1 documentation, and only
 describes the changes.
\end_layout

\begin_layout Section
Program Operation
\end_layout

\begin_layout Standard
Compiling by running
\family typewriter
 make
\family default
, which also copies the local
\family typewriter
 kernel.elf
\family default
 to
\family typewriter
 /u/cs452/tftp/ARM/j53sun/k2.elf
\family default
.
\end_layout

\begin_layout LyX-Code
\align block
> load -b 0x00200000 -h 129.97.167.12 "ARM/sunchang/k3.elf"
\end_layout

\begin_layout LyX-Code
> go
\end_layout

\begin_layout Standard
See also Source Code location section.
\end_layout

\begin_layout Section
Kernel Structure
\end_layout

\begin_layout Standard
In the third part of the kernel, processing of interrupts generated by a
 counter-timer is added, and this capability is used to create a clock server.
 
\end_layout

\begin_layout Standard
Components of the clock server include: 
\end_layout

\begin_layout Enumerate
AwaitEvent implementation
\end_layout

\begin_layout Enumerate
Clock server and a clock notifier implementation
\end_layout

\begin_layout Enumerate
Delay, Time and DelayUntil as wrappers for Send to the clock server.
 
\end_layout

\begin_layout Subsection
Interrupt I/O
\end_layout

\begin_layout Standard
Processing of interrupts generated by a counter-timer to your kernel is
 done by...
\end_layout

\begin_layout Subsection
AwaitEvent
\end_layout

\begin_layout Standard
Description of int 
\family typewriter
AwaitEvent(int eventType)
\family default
.
 A table of 64 task descriptor pointers keeps track which task is registered
 to await a given interrupt.

\end_layout

\begin_layout Itemize
When AwaitEvent is called, it adds the calling task into the table and sets
 the enable bit for that interrupt code.

\end_layout

\begin_layout Itemize
The kernel doesnâ€™t handle volatile data itself or clear the cause of the
 interrupt, it leaves that to the caller.
\end_layout

\begin_layout Itemize
Interrupts are enabled when AwaitEvent returns.

\end_layout

\begin_layout Itemize
At most one task to block on a single event.
 Although if needed, multiple tasks can be changed up through the next field
 in the task descriptor if needed.

\end_layout

\begin_layout Standard
Two issues worth mentioning are (1) tasks has different priorities and (2)
 multiple interrupts can occur at the same time.
 To deal with this, De Brujin sequences are used on the registers, adding
 the task to the ready queue.
 Then it clears the bit for that interrupt and process repeats until the
 interrupt status is completely cleared.

\end_layout

\begin_layout Subsection
Clock Server
\end_layout

\begin_layout Standard
Tasks that want to obtain service from the clock server must do so by obtaining
 its tid from the name server.
 
\end_layout

\begin_layout Standard
Notifier wait on events from a timer and Send notifications that the timer
 ticked to the clock server.
\end_layout

\begin_layout Subsection
Game Clients Tasks
\end_layout

\begin_layout Standard
A client task is created by the first user task.
 It immediately sends to its parent, the first user task, requesting a delay
 time,
\begin_inset Formula $t$
\end_inset

, and a number,
\begin_inset Formula $n$
\end_inset

, of delays.
 It then uses WhoIs to discover the tid of the clock server.
 It then delays
\begin_inset Formula $n$
\end_inset

 times, each time for the time interval,
\begin_inset Formula $t$
\end_inset

.
 After each delay it prints its tid, its delay interval, and the number
 of delays currently completed on the RedBoot terminal.
 Finally it exits.

\end_layout

\begin_layout Subsection
First User Task
\end_layout

\begin_layout Standard
The first user task creates the name server, the clock server, and four
 client tasks.
 It then executes Receive four times, and Replies to each client task in
 turn.
 It then exits.
\end_layout

\begin_layout Section
Source Code Location
\end_layout

\begin_layout Itemize
Repository location is 
\family typewriter
gitlab@git.uwaterloo.ca:j53sun/cs452team.git
\end_layout

\begin_layout Itemize
SHA1 hash of commit for submission: 
\family typewriter
FIXME
\end_layout

\begin_layout Section
Program Output
\end_layout

\begin_layout LyX-Code
RedBoot> go
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Program completed with status 0
\end_layout

\begin_layout Paragraph
Explaination
\end_layout

\end_body
\end_document
