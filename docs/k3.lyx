#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
CS 452: Kernel 3
\end_layout

\begin_layout Author
Jason Sun (#20387090) and Shuo Chang (#20378235)
\end_layout

\begin_layout Date
June 9, 2015
\end_layout

\begin_layout Standard
This document builds upon Kernel 2 and Kernel 1 documentation, and only
 describes the changes.
\end_layout

\begin_layout Section
Program Operation
\end_layout

\begin_layout Standard
Compiling by running
\family typewriter
 make
\family default
, which also copies the local
\family typewriter
 kernel.elf
\family default
 to
\end_layout

\begin_layout Standard

\family typewriter
/u/cs452/tftp/ARM/j53sun/k2.elf
\family default
.
\end_layout

\begin_layout LyX-Code
> load -b 0x00200000 -h 129.97.167.12 "ARM/sunchang/k3.elf"
\end_layout

\begin_layout LyX-Code
> go
\end_layout

\begin_layout Standard
See also Source Code location section.
\end_layout

\begin_layout Section
Kernel Data Structures
\end_layout

\begin_layout Subsection
DelayedTask
\end_layout

\begin_layout Standard
The DelayedTask struct is used by the clock server to keep track of tasks
 blocked by Delay() and DelayUntil().
 The tid is the tid of the task, the finalTick is the time that the delay
 expires; the next pointer is to support inserting/removing into DelayedQueue,
 a singly circular linked-list.
\end_layout

\begin_layout LyX-Code
typedef struct DelayedTask {
\end_layout

\begin_deeper
\begin_layout LyX-Code
int tid;
\end_layout

\begin_layout LyX-Code
unsigned int finalTick;
\end_layout

\begin_layout LyX-Code
struct DelayedTask *next;
\end_layout

\end_deeper
\begin_layout LyX-Code
} DelayedTask;
\end_layout

\begin_layout Subsection
DelayedQueue
\end_layout

\begin_layout Standard
The DelayedQueue struct is used by clock server to implement linked-list
 of delayed tasks.
 It only consists of a single tail pointer.
 The list is empty if the tail pointer is NULL, and the head of the list
 can be obtained from tail->next.
\end_layout

\begin_layout LyX-Code
typedef struct DelayedQueue {
\end_layout

\begin_deeper
\begin_layout LyX-Code
DelayedTask *tail;
\end_layout

\end_deeper
\begin_layout LyX-Code
} DelayedQueue;
\end_layout

\begin_layout Subsection
ClockRequest
\end_layout

\begin_layout Standard
The ClockRequest struct is used to communicate between the clock server,
 the clock notifier, and client tasks through calling the wrapper functions
 Time(), Delay(), DelayUntil().
 The type can be one of {NOTIFICATION, TIME, DELAY, DELAY_UNTIL}, and data
 maybe an argument accepted by Delay() and DelayUntil().
\end_layout

\begin_layout LyX-Code
typedef struct ClockReq
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_deeper
\begin_layout LyX-Code
int type;
\end_layout

\begin_layout LyX-Code
int data;
\end_layout

\end_deeper
\begin_layout LyX-Code
} ClockReq;
\end_layout

\begin_layout Section
Kernel Algorithms
\end_layout

\begin_layout Standard
In the third part of the kernel, the following features are added:
\end_layout

\begin_layout Enumerate
Context switch support for handling hardware interrupt
\end_layout

\begin_layout Enumerate
Setup timer and interrupt control units
\end_layout

\begin_layout Enumerate
Hardware interrupt handler
\end_layout

\begin_layout Enumerate
Implementation of AwaitEvent()
\end_layout

\begin_layout Enumerate
Clock server and notifier, Time(), Delay(), and DelayUntil() functions
\end_layout

\begin_layout Subsection
Context Switch on Hardware Interrupt
\end_layout

\begin_layout Standard
Before Kernel 3, interrupts are triggered using 
\family typewriter
swi
\family default
 via system calls, and IRQ is disabled in user mode; the context switch
 of the kernel made assumptions regarding the registers on kernel entry.
 Specifically, 
\family typewriter
r0
\family default
 was thought to contain a fixed pointer to the address of the static request
 struct, and thus was not saved and restored during the context switch.
 Furthermore, registers 
\family typewriter
r2
\family default
 and 
\family typewriter
r3
\family default
 are dedicated to store/load user 
\family typewriter
pc
\family default
 and user 
\family typewriter
cpsr
\family default
.
 The solution worked at the time because the GCC handled saving/restoring
 of scratch registers in system call stubs.
\end_layout

\begin_layout Standard
By enabling hardware interrupt in Kernel 3, the assumptions are no longer
 true: in addition to the new IRQ mode introduced by hardware interrupt,
 interrupts can occur any stage of the user program execution.
 Scratch registers must be properly saved in order for the kernel to function
 correctly.
 The following lists will describe how the new context switch code work:
\end_layout

\begin_layout Subsubsection
kernelExit
\end_layout

\begin_layout Itemize
Store all kernel registers onto kernel stack
\end_layout

\begin_layout Quotation

\family typewriter
stmfd sp!, {r0-r12, lr}
\end_layout

\begin_layout Itemize
Change to system mode 
\end_layout

\begin_layout Quotation

\family typewriter
msr cpsr_c, #0xdf
\end_layout

\begin_layout Itemize
Load task->sp into sp 
\end_layout

\begin_layout Quotation

\family typewriter
ldr sp, [r0, #12]
\end_layout

\begin_layout Itemize
Load task->ret into r0 
\end_layout

\begin_layout Quotation

\family typewriter
ldr r0, [r0, #8]
\end_layout

\begin_layout Itemize
Load sp into r1 
\end_layout

\begin_layout Quotation

\family typewriter
mov r1, sp
\end_layout

\begin_layout Itemize
Update sp to position after popping user cpsr, pc 
\end_layout

\begin_layout Quotation

\family typewriter
add sp, sp, #8
\end_layout

\begin_layout Itemize
Change back to supervisor mode 
\end_layout

\begin_layout Quotation

\family typewriter
msr cpsr_c, #0xd3
\end_layout

\begin_layout Itemize
Load user cpsr, user pc -> supervisor lr 
\end_layout

\begin_layout Quotation

\family typewriter
ldmfd r1, {r2, lr}
\end_layout

\begin_layout Itemize
Load user cpsr to supervisor's spsr 
\end_layout

\begin_layout Quotation

\family typewriter
msr spsr, r2
\end_layout

\begin_layout Itemize
Change to system mode 
\end_layout

\begin_layout Quotation

\family typewriter
msr cpsr_c, #0xdf
\end_layout

\begin_layout Itemize
Load user registers from user stack 
\end_layout

\begin_layout Quotation

\family typewriter
ldmfd sp!, {r1-r12, lr}
\end_layout

\begin_layout Itemize
Change to supervisor mode 
\end_layout

\begin_layout Quotation

\family typewriter
msr cpsr_c, #0xd3
\end_layout

\begin_layout Itemize
Execute user code 
\end_layout

\begin_layout Quotation

\family typewriter
movs pc, lr 
\end_layout

\begin_layout Subsubsection
irqEnter
\end_layout

\begin_layout Standard

\shape italic
Note: the program counter automatically advances into kernelEnter after
 the last instruction in this routine.
\end_layout

\begin_layout Itemize
Go to supervisor mode
\end_layout

\begin_layout Quotation

\family typewriter
msr cpsr_c, #0xd3
\end_layout

\begin_layout Itemize
Push r0 on the kernel stack
\end_layout

\begin_layout Quotation

\family typewriter
stmfd sp!, {r0}
\end_layout

\begin_layout Itemize
Go to irq mode
\end_layout

\begin_layout Quotation

\family typewriter
msr cpsr_c, #0xd2
\end_layout

\begin_layout Itemize
Put lr - 4 (pc_usr) to r0
\end_layout

\begin_layout Quotation

\family typewriter
sub r0, lr, #4
\end_layout

\begin_layout Itemize
Go to supervisor mode
\end_layout

\begin_layout Quotation

\family typewriter
msr cpsr_c, #0xd3
\end_layout

\begin_layout Itemize
Put correct user pc to supervisor lr
\end_layout

\begin_layout Quotation

\family typewriter
mov lr, r0
\end_layout

\begin_layout Itemize
Restore r0 from the kernel stack
\end_layout

\begin_layout Quotation

\family typewriter
ldmfd sp!, {r0}
\end_layout

\begin_layout Itemize
Set spsr to user mode (irq enabled)
\end_layout

\begin_layout Quotation

\family typewriter
msr spsr_c, #0x50
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection
kernelEnter
\end_layout

\begin_layout Standard
Change to system mode
\end_layout

\begin_layout Quotation

\family typewriter
msr cpsr_c, #0xdf
\end_layout

\begin_layout Standard
Store all user registers to user stack
\end_layout

\begin_layout Quotation

\family typewriter
stmfd sp!, {r1-r12, lr}
\end_layout

\begin_layout Standard
Put user sp in r1
\end_layout

\begin_layout Quotation

\family typewriter
mov r1, sp
\end_layout

\begin_layout Standard
Calculate user sp after pushing cpsr and pc
\end_layout

\begin_layout Quotation

\family typewriter
sub sp, sp, #8
\end_layout

\begin_layout Standard
Change back to supervisor mode
\end_layout

\begin_layout Quotation

\family typewriter
msr cpsr_c, #0xd3
\end_layout

\begin_layout Standard
Put spsr (user cpsr) in r2
\end_layout

\begin_layout Quotation

\family typewriter
mrs r2, spsr
\end_layout

\begin_layout Standard
Store r2 (user cpsr), lr (user pc) to user stack
\end_layout

\begin_layout Quotation

\family typewriter
stmfd r1!, {r2, lr}
\end_layout

\begin_layout Standard
Load r0 (*task)
\end_layout

\begin_layout Quotation

\family typewriter
ldmfd sp!, {r0}
\end_layout

\begin_layout Standard
Store r1 (user sp) in task->sp
\end_layout

\begin_layout Quotation

\family typewriter
str r1, [r0, #12]
\end_layout

\begin_layout Standard
Store r0 in task->ret
\end_layout

\begin_layout Quotation

\family typewriter
str r0, [r0, #8]
\end_layout

\begin_layout Standard
Load the rest of the kernel registers from stack
\end_layout

\begin_layout Quotation

\family typewriter
ldmfd sp!, {r1-r12, pc} 
\end_layout

\begin_layout Subsection
Timer and Interrupt Control Units
\end_layout

\begin_layout Standard
The timer 3 in the EP9302 SoC is used to track time.
 It is set up to use 508 kHz clock in periodic mode, with load register
 set to 5080 (10 milliseconds interval between interrupts).
\end_layout

\begin_layout Standard
The SoC contains 2 PL190 interrupt controllers.
 On kernel start, the 20th bit (1<<19), of the second interrupt controller,
 which is the bit corresponds to timer interrupt, is enabled.
 Both interrupt control units' select bits are set to 0, which enables IRQ
 mode.
 When the program is about to exit, the 20th bit of the second interrupt
 controller is cleared.
\end_layout

\begin_layout Subsection
Hardware Interrupt Handler
\end_layout

\begin_layout Standard
The interrupt handler only handles timer 3 underflow interrupt at the moment.
 Status bit of the second ICU is checked for interrupt; if interrupt occurred,
 clear the interrupt in timer device and if there is a task blocked on timer
 event, put it back to the ready queue.
\end_layout

\begin_layout Subsection
AwaitEvent
\end_layout

\begin_layout Standard
Description of int 
\family typewriter
AwaitEvent(int eventType)
\family default
.
 A table of 64 task descriptor pointers keeps track which task is registered
 to await a given interrupt.
\end_layout

\begin_layout Itemize
When AwaitEvent is called, it adds the calling task into the table and sets
 the enable bit for that interrupt code.
\end_layout

\begin_layout Itemize
The kernel doesn’t handle volatile data itself or clear the cause of the
 interrupt, it leaves that to the caller.
\end_layout

\begin_layout Itemize
Interrupts are enabled when AwaitEvent returns.
\end_layout

\begin_layout Itemize
At most one task to block on a single event.
 Although if needed, multiple tasks can be changed up through the next field
 in the task descriptor if needed.
\end_layout

\begin_layout Standard
Two issues worth mentioning are (1) tasks has different priorities and (2)
 multiple interrupts can occur at the same time.
 To deal with this, De Brujin sequences are used on the registers, adding
 the task to the ready queue.
 Then it clears the bit for that interrupt and process repeats until the
 interrupt status is completely cleared.
\end_layout

\begin_layout Subsection
Clock Server and Notifier
\end_layout

\begin_layout Standard
\paragraph_spacing single
The clock server, together with the notifier, provides timing functionality
 for other user programs.
 Three functions are provided: Time(), which returns the current system
 tick; Delay(), which delays a task for certain number of ticks; and DelayUntil(
), which delays a task till a certain time.
 A single tick is defined to be 10 milliseconds (see 2.2 Timer Setup for
 details).
\end_layout

\begin_layout Subsubsection
Clock Server
\end_layout

\begin_layout Standard
The clock server serves requests from the notifier task and client tasks
 calling Time(), Delay(), and DelayUntil(), using the message passing mechanisms
 built in Kernel 2.
 It also registers with the name server so it could be discovered by other
 tasks.
 Here are the algorithms:
\end_layout

\begin_layout Description
clockServerTask:
\end_layout

\begin_layout Enumerate
Initialize data structures
\end_layout

\begin_layout Enumerate
Register with name server
\end_layout

\begin_layout Enumerate
Spawn notifier
\end_layout

\begin_layout Enumerate
Forever loop
\end_layout

\begin_deeper
\begin_layout Enumerate
Receive ClockRequest
\end_layout

\begin_layout Enumerate
If request is notification
\end_layout

\begin_deeper
\begin_layout Enumerate
Reply
\end_layout

\begin_layout Enumerate
Increment tick
\end_layout

\begin_layout Enumerate
removeExpiredTasks()
\end_layout

\end_deeper
\begin_layout Enumerate
If request is from Time()
\end_layout

\begin_deeper
\begin_layout Enumerate
Reply with tick
\end_layout

\end_deeper
\begin_layout Enumerate
If request is Delay()
\end_layout

\begin_deeper
\begin_layout Enumerate
Reply
\end_layout

\begin_layout Enumerate
insertDelayedTask(tid, request.data + tick)
\end_layout

\end_deeper
\begin_layout Enumerate
If request is DelayUntil()
\end_layout

\begin_deeper
\begin_layout Enumerate
Reply
\end_layout

\begin_layout Enumerate
insertDelayedTask(tid, request.data)
\end_layout

\end_deeper
\end_deeper
\begin_layout Description
removeExpiredTasks:
\end_layout

\begin_layout Enumerate
If tail pointer is NULL
\end_layout

\begin_deeper
\begin_layout Enumerate
return
\end_layout

\end_deeper
\begin_layout Enumerate
cur := tail->next
\end_layout

\begin_layout Enumerate
Forever loop
\end_layout

\begin_deeper
\begin_layout Enumerate
If curr->finalTick > current time
\end_layout

\begin_deeper
\begin_layout Enumerate
tail->next := curr;
\end_layout

\begin_layout Enumerate
break
\end_layout

\end_deeper
\begin_layout Enumerate
Reply to curr->tid (unblocks a task)
\end_layout

\begin_layout Enumerate
If curr = tail
\end_layout

\begin_deeper
\begin_layout Enumerate
tail = NULL
\end_layout

\begin_layout Enumerate
break
\end_layout

\end_deeper
\begin_layout Enumerate
curr := curr->next
\end_layout

\end_deeper
\begin_layout Description
insertDelayedTask(task,finalTick):
\end_layout

\begin_layout Enumerate
If tail pointer is NULL
\end_layout

\begin_deeper
\begin_layout Enumerate
tail := task
\end_layout

\begin_layout Enumerate
task->next := task
\end_layout

\begin_layout Enumerate
return
\end_layout

\end_deeper
\begin_layout Enumerate
curr := tail
\end_layout

\begin_layout Enumerate
Forever loop
\end_layout

\begin_deeper
\begin_layout Enumerate
If curr->next->finalTick >= finalTick
\end_layout

\begin_deeper
\begin_layout Enumerate
task->next := curr->next
\end_layout

\begin_layout Enumerate
curr->next := task
\end_layout

\begin_layout Enumerate
return
\end_layout

\end_deeper
\begin_layout Enumerate
If curr->next = tail
\end_layout

\begin_deeper
\begin_layout Enumerate
task->next := curr->next
\end_layout

\begin_layout Enumerate
curr->next := task
\end_layout

\begin_layout Enumerate
tail := task
\end_layout

\begin_layout Enumerate
return
\end_layout

\end_deeper
\begin_layout Enumerate
curr := curr->next
\end_layout

\end_deeper
\begin_layout Subsubsection
Clock Notifier
\end_layout

\begin_layout Standard
The clock notifier waits for a timer interrupt to occur using the kernel
 primitive AwaitEvent(); on timer 3 underflow interrupt, it gets unblocked
 by the kernel and sends a notification to the clock server, signaling it
 to increase current tick.
 The Send() call is subsequently unblocked by the clock server.
\end_layout

\begin_layout Description
clockNotifier:
\end_layout

\begin_layout Enumerate
pid := MyParentTid()
\end_layout

\begin_deeper
\begin_layout Enumerate
pid now contains the tid of the clock server
\end_layout

\end_deeper
\begin_layout Enumerate
Create a ClockRequest, req
\end_layout

\begin_layout Enumerate
req.type := NOTIFICATION
\end_layout

\begin_layout Enumerate
Forever loop
\end_layout

\begin_deeper
\begin_layout Enumerate
AwaitEvent(TIMER_EVENT)
\end_layout

\begin_layout Enumerate
Send(pid, &req, sizeof(req), 0, 0)
\end_layout

\end_deeper
\begin_layout Subsubsection
Time(), Delay(), and DelayUntil()
\end_layout

\begin_layout Standard
Time(), Delay(), and DelayUntil() are functions wrapping Send() to the clock
 server; therefore, their only difference is the type of messages they send.
 The wrapper functions also loop up the clock server on the name server,
 and set it to a static variable declared within each function.
\end_layout

\begin_layout Enumerate
static clockServerTid := -1
\end_layout

\begin_layout Enumerate
If clockServerTid < 0
\end_layout

\begin_deeper
\begin_layout Enumerate
clockServerTid := WhoIs(CLOCK_SERVER_NAME)
\end_layout

\end_deeper
\begin_layout Enumerate
Put argument and type of request {TIME, DELAY, DELAY_UNTIL} in a ClockRequest
 object
\end_layout

\begin_layout Enumerate
Send the ClockRequest object to clockServerTid
\end_layout

\begin_layout Enumerate
return 0
\end_layout

\begin_layout Subsection
Game Clients Tasks
\end_layout

\begin_layout Standard
A client task is created by the first user task.
 It immediately sends to its parent, the first user task, requesting a delay
 time,
\begin_inset Formula $t$
\end_inset

, and a number,
\begin_inset Formula $n$
\end_inset

, of delays.
 It then uses WhoIs to discover the tid of the clock server.
 It then delays
\begin_inset Formula $n$
\end_inset

 times, each time for the time interval,
\begin_inset Formula $t$
\end_inset

.
 After each delay it prints its tid, its delay interval, and the number
 of delays currently completed on the RedBoot terminal.
 Finally it exits.
\end_layout

\begin_layout Subsection
First User Task
\end_layout

\begin_layout Standard
The first user task creates the name server, the clock server, and four
 client tasks.
 It then executes Receive four times, and Replies to each client task in
 turn.
 It then exits.
\end_layout

\begin_layout Section
Source Code Location
\end_layout

\begin_layout Itemize
Repository location is 
\family typewriter
gitlab@git.uwaterloo.ca:j53sun/cs452team.git
\end_layout

\begin_layout Itemize
SHA1 hash of commit for submission: 
\family typewriter
FIXME
\end_layout

\begin_layout Section
Program Output
\end_layout

\begin_layout LyX-Code
RedBoot> go
\end_layout

\begin_layout LyX-Code
clientTask 8 interval 71 delays completed 3 total time 2
\end_layout

\begin_layout LyX-Code
clientTask 8 interval 33 delays completed 6 total time 7
\end_layout

\begin_layout LyX-Code
clientTask 8 interval 23 delays completed 9 total time 9
\end_layout

\begin_layout LyX-Code
clientTask 8 interval 10 delays completed 20 total time 9
\end_layout

\begin_layout LyX-Code
clinetTask 4 exiting...
\end_layout

\begin_layout LyX-Code
clientTask 7 exiting...
\end_layout

\begin_layout LyX-Code
userTaskK3 is done, exiting...
\end_layout

\begin_layout LyX-Code
clientTask 8 exiting...
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Paragraph
Explaination
\end_layout

\end_body
\end_document
